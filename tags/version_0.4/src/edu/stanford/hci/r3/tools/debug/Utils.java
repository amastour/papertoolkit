package edu.stanford.hci.r3.tools.debug;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
import com.sun.jdi.AbsentInformationException;
import com.sun.jdi.Bootstrap;
import com.sun.jdi.Location;
import com.sun.jdi.Method;
import com.sun.jdi.VirtualMachine;
import com.sun.jdi.VirtualMachineManager;
import com.sun.jdi.connect.AttachingConnector;
import com.sun.jdi.connect.IllegalConnectorArgumentsException;
import com.sun.jdi.connect.Connector.Argument;
*/

/**
 * 
 * <p>
 * <span class="BSDLicense"> This software is distributed under the <a
 * href="http://hci.stanford.edu/research/copyright.txt">BSD License</a>. </span>
 * </p>
 * 
 * @author Marcello
 *
 */
public class Utils {
	/*
	public static void main(String args[]) {
		System.out.println("vm = "+getVM());
	}
	
	public static VirtualMachine getVM() {
		/
		  # Debugger is launched. Debugger selects a connector in the list returned by attachingConnectors() matching the transport with the name "xxx".
		 * # Debugger presents the default connector parameters (obtained through Connector.defaultArguments()) to the end user, allowing the user to fill in the transport-specific address generated by the target VM.
		 * # Debugger calls the AttachingConnector.attach(java.util.Map) method of the selected to attach to the target VM. A VirtualMachine mirror is returned. 
		 
		VirtualMachineManager vmm = Bootstrap.virtualMachineManager();
		VirtualMachine vm = null;
		for (AttachingConnector ac : vmm.attachingConnectors()) {
			System.out.println("ac = "+ac+"[name="+ac.name()+",transport="+ac.transport()+",desc="+ac.description());
			if (ac.name().equals("com.sun.jdi.SocketAttach")) {
				Map<String,Argument> map = ac.defaultArguments();
				map.get("port").setValue("3000");
				for (String key : map.keySet()) {
					System.out.println("key = "+key+" argument = "+map.get(key));
				}
				try {
					vm = ac.attach(map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalConnectorArgumentsException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return vm;
	}
	
	

	public String getSource(String sourcebase, Method m) {
		StringBuffer sb = new StringBuffer();
		
		Map<String,List<String>> files = new HashMap<String,List<String>>();
		
		try {
			for (Location l : m.allLineLocations()) {
				//l.sourcePath()
				//l.lineNumber()
			}
		} catch (AbsentInformationException ex) {
			return ex.toString();
		}
		
		
		return sb.toString();
	}*/
	/**
	 * Reads a file into a list of Strings
	 * @param file
	 * @return
	 * @throws IOException
	 */
	public static List<String> getLines(File file) throws IOException {
		FileInputStream fis = new FileInputStream(file);
		BufferedReader read = new BufferedReader(new InputStreamReader(fis));

		String line;
		List<String> strings = new ArrayList<String>();
		while ((line = read.readLine())!=null)
			strings.add(line); 
		return strings;
	}
}
